FORMAT: 1A

# BMGF - The Brain Architecture Game API
The Brain Architecture Game is a tabletop game experience that builds understanding of the powerful role of experiences on early brain development – what promotes it, what derails it, with what consequences for society.

This API is for facilitating the downloading of cards, special rules, and saving game progress based on moderator parameters.
# Group Account Management

## Registration [/register]

### Register New User [POST]
+ Request (application/json)
    + Attributes
        + givenName: Jane (string)
        + surname: Doe (string)
        + email: jane@doe.com (string)
        + password: TestTest1 (string)

+ Response 200 (application/json)
    + Attributes
        + givenName: Jane (string)
        + surname: Doe (string)
        + email: jane@doe.com (string)

## OAuth Tokens [/oauth/token]

For authenticated requests, you should pass headers of "Accept": "application/json" and "Authorization": "Bearer {access_token}"

### Get OAuth Tokens [POST]
+ Request (application/json)
    + Attributes
        + grant_type: password (string)
        + username: jane@doe.com (string)
        + password: TestTest1 (string)
        + password: welcome@1 (string)

+ Response 200 (application/json)
    + Attributes
        + access_token: pYXQiOjE0NzU1NDc (string)
        + refresh_token: eyJraWQiOiI3SzU (string)
        + token_type: Bearer (string)
        + expires_in: 3600 (number)

# Group Cards
Cards related resources of the **BMGF Brain Architecture Game API**

## Cards [/card]
  + Attributes
    + id : 1 (number)
    + language : English (string)
    + year : 1 (number)
    + text : Responsive, supportive caregivers. (string)
    + type : 3 (number) - 3=positive, 2=tolerable, 1=toxic
    + science_reason: Serious science (string)
    + active : true (boolean)

### List all Cards [GET]
+ Response 200 (application/json)
  + Attributes (array[Cards])

### Create a Card [POST]
+ Request (application/json)
    + Attributes (object)
        + language : Spanish (string)
        + year : 3 (number)
        + text : etender español (string)
        + type : 1 (number)
        + science_reason: Serious science (string)

+ Response 201 (application/json)
  + Attributes (Cards)

## Card [/card/{id}]
A single Card object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Card to perform action with. Has example value.

### Retrieve a Card [GET]
+ Response 200 (application/json)
  + Attributes (Cards)


### Edit a Card [POST]
+ Request (application/json)
  + Attributes (Cards)

+ Response 201 (application/json)
  + Attributes (Cards)

### Remove a Card [PATCH]
+ Response 204

## Change Activation of a Card [/card/{id}/activate]

### Activate [PUT]

+ Request (application/json)
  + Attributes (object)
      + active : false (boolean)

+ Response 200 (application/json)
  + Attributes (Cards)

## Card Sets [/card/set]
Retrieve and Create card sets.

  + Attributes
      + id : 1 (number)
      + name : Base Set (string)
      + active : true (boolean)
      + language_id: 1 (number)
      + cards_per_year: 7 (number) - The number of cards available for each year of gameplay.
      + cards : array[Cards] (array[Cards])

### Retrieve Card Sets [GET]
+ Response 200 (application/json)
    + Attributes (array[Card Sets])

### Create Card Set [POST]
    Provide a name and a list of card ids in order to create a Card Set.
+ Request (application/json)
    + Attributes (object)
        + name : Base Set (string)
        + language_id: 1 (number)
        + cards : 1, 2, 3 (array[number])

+ Response 201 (application/json)
    + Attributes (Card Sets)

## Specific Card Sets [/card/set/{id}]
Retrieve a specific existing card set.

+ Parameters
    + id (number) - The Id of the card set you wish to retrieve.

### Retrieve Card Set [GET]

+ Response 200 (application/json)
    + Attributes (Card Sets)

### Edit A Card Set [POST]
    Supply a list of card IDs to be added and a list of card IDs to be removed
+ Request (application/json)
    + Attributes (object)
        + add : 4 (array[number])
        + remove: 2 (array[number])

+ Response 201 (application/json)
    + Attributes (Card Sets)

### Delete a Card Set [PATCH]

+ Request (application/json)
    + Attributes (object)
      + visibility: false (boolean)

+ Response 204

## Clone A Card Set [/card/set/{id}/clone]

### Clone [POST]

+ Request (application/json)
    + Attributes (object)
        + language : Portuguese (string)
        + name : Base Set Portuguese (string)

+ Response 201 (application/json)
    + Attributes (Card Sets)

## Change Activation of a Card Set [/card/set/{id}/activate]

### Activate [PUT]

+ Request (application/json)
    + Attributes (object)
      + active : false (boolean)

+ Response 200 (application/json)
    + Attributes (Card Sets)

## Select default card set for a language [/card/set/{language_id}/default]

### Activate [PATCH]

+ Request (application/json)
    + Attributes (object)
      + card_set: 2 (number)

+ Response 204

# Group Rules
Rules related resources of the **BMGF Brain Architecture Game API**

## Rules [/rule]
+ Attributes (object)
    + id: 1 (number)
    + language_id: 1 (number)
    + image_url: `https://bucketeer-69dafd78-a553-4915-aa56-d22c508c73ff.s3.amazonaws.com/public/mock-rule-weight.png` (string)
    + title: Rule 1 (string)
    + subtitle: This is a subtitle for the rule. (string)
    + description: The goal of the game is to build a brain that is tall. (string)
    + active: true (boolean)

### List all Rules [GET]
+ Response 200 (application/json)
    + Attributes (array[Rules])

### Create a Rule [POST]
+ Request (application/json)
    + Attributes (Rules)

+ Response 201 (application/json)
    + Attributes (Rules)

## Rule [/rule/{id}]
A single Rule object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Rule to perform action with. Has example value.

### Retrieve a Rule [GET]
+ Response 200 (application/json)
    + Attributes (Rules)

### Edit a Rule [PUT]
+ Request (application/json)
    + Attributes (Rules)

+ Response 200 (application/json)
    + Attributes (Rules)

### Remove a Rule [DELETE]
+ Response 204

## Change Activation of a Rule [/rule/{id}/activate]

### Activate [PUT]

+ Request (application/json)

        {"active" : true}

+ Response 200 (application/json)
    + Attributes (Rules)

## Rule Sets [/rule/set]
Retrieve and Create rule sets.

+ Attributes
    + id: 1 (number)
    + name: Rule Set (string)
    + active: true (boolean)
    + is_default: true (boolean)
    + language_id: 1 (number)
    + rules: (array[Rules])

### Retrieve Rule Sets [GET]
+ Response 200 (application/json)
    + Attributes (array[Rule Sets])

### Create Rule Set [POST]
    Provide a name and a list of rule ids in order to create a Rule Set.
+ Request (application/json)
    + Attributes (object)
        + name: Base Set (string)
        + rules: [1, 2, 3] (array[number])

+ Response 201 (application/json)
    + Attributes (Rule Sets)

## Specific Rule Sets [/rule/set/{id}]
Retrieve a specific existing rule set.

+ Parameters
    + id (number) - The Id of the rule set you wish to retrieve.

### Retrieve Rule Set [GET]

+ Response 200 (application/json)
    + Attributes (Rule Sets)

### Edit A Rule Set [PUT]
    Supply a list of rule IDs to be added and a list of rule IDs to be removed
+ Request (application/json)
    + Attributes (object)
        + remove: 2, 3 (array[number])
        + add: 1 (array[number])

+ Response 200 (application/json)
    + Attributes (Rule Sets)

### Delete a Rule Set [PATCH]
+ Request (application/json)
    + Attributes (object)
      + active: false (boolean)

+ Response 204

## Clone A Rule Set [/rule/set/{id}/clone]

### Clone [POST]

+ Request (application/json)
    + Attributes (object)
        + language: Portuguese (string)
        + name : Base Set Portuguese (string)

+ Response 201 (application/json)
    + Attributes (Rule Sets)

## Change Activation of a Rule Set [/rule/set/{id}/activate]

### Activate [PUT]

+ Request (application/json)
    + Attributes (object)
        + active: false (boolean)

+ Response 200 (application/json)
    + Attributes (Rule Sets)

# Group Bases
Brain Base related resources of the **BMGF Brain Architecture Game API**

## Brain Bases [/base]
  + Attributes
    + id : 1 (number)
    + imageUrl : `https://bucketeer-69dafd78-a553-4915-aa56-d22c508c73ff.s3.amazonaws.com/public/mock-base.png` (string)
    + name : Base 1 (string)
    + numPipes : 4 (number)
    + numStraws : 2 (number)
    + roll_number : 6 (number)

### List all Bases [GET]
+ Response 200 (application/json)
  + Attributes (array[Brain Bases])

### Create a Base [POST]
+ Request (application/json)
    + Attributes (object)
      + imageUrl : `https://bucketeer-69dafd78-a553-4915-aa56-d22c508c73ff.s3.amazonaws.com/public/mock-base.png` (string)
      + name : Base 4 (string)
      + numPipes : 5 (number)
      + numStraws : 2 (number)
      + roll_number : 6 (number)

+ Response 201 (application/json)
    + Attributes (Brain Bases)

## Base Specific [/base/{id}]
A single Base object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Base to perform action with. Has example value.

### Retrieve a Base [GET]
+ Response 200 (application/json)
  + Attributes (Brain Bases)


### Edit a Base [PUT]
+ Request (application/json)
  + Attributes (Brain Bases)

+ Response 200 (application/json)
  + Attributes (Brain Bases)


### Delete a Base [PATCH]
+ Request (application/json)
    + Attributes (object)
      + active: false (boolean)

+ Response 204

## Base Sets [/base/set]
Retrieve and Create base sets.

  + Attributes
    + id : 1 (number)
    + name : Brain Base Set (string)
    + active : true (boolean)
    + bases : (array[Brain Bases])

### Retrieve Base Sets [GET]
+ Response 200 (application/json)
  + Attributes (array[Base Sets])

### Create Base Set [POST]
    Provide a name and a list of card ids in order to create a Card Set.
+ Request (application/json)
    + Attributes (object)
        + name : Brain Base Set (string)
        + bases : 1 , 2, 3 (array[number])

+ Response 201 (application/json)
  + Attributes (Base Sets)

## Specific Base Sets [/base/set/{id}]
Retrieve a specific existing rule set.

+ Parameters
    + id (number, optional) - The Id of the rule set you wish to retrieve.

### Retrieve Base Set [GET]

+ Response 201 (application/json)
  + Attributes (Base Sets)

### Edit A Base Set [PUT]
    Supply a list of base IDs to be added and a list of base IDs to be removed
+ Request (application/json)
    + Attributes (object)
        + add : 4 (array[number])
        + remove : 2 (array[number])

+ Response 200 (application/json)
  + Attributes (Base Sets)

### Delete a Base Set [PATCH]
+ Request (application/json)
    + Attributes (object)
      + active: false (boolean)

+ Response 204

## Change Activation of a Base Set [/base/set/{id}/activate]

### Activate [PATCH]

+ Request (application/json)
    + Attributes (object)
        + active : false (boolean)

+ Response 204

# Group BrainPictures

## BrainPicture [/brainpicture/{id}]

A brain picture is created by each team at the end of a year and added to a journal entry.

+ Parameters
    + id (number, optional) - The ID of the desired brain picture.

+ Attributes
    + id: 1 (number, required) - PostgreSQL `serial` type.
    + year_id: 127 (number) - FK to the year associated with this brain picture. This year is old relevant to a specific team within a game session.
    + team_life_journal_id: 123 (number): - FK to the team journal that contains this brain picture.
    + brain_picture_url: `https://bucketeer-69dafd78-a553-4915-aa56-d22c508c73ff.s3.amazonaws.com/public/mock-brain-2.png` (string) - Public S3 link to this brain picture.

### Retrieve a brain picture [GET]
Retrieves the brain picture with the given ID.

+ Response 200 (application/json)
    + Attributes (BrainPicture)

## BrainPictures [/brainpictures{?team_life_journal_id}]

+ Attributes (array[BrainPicture])

### List all brain pictures[GET]
Returns a list of all brain pictures. You can optionally request within a single team's life journal.

+ Parameters
    + team_life_journal_id (number, optional)

+ Response 200 (application/json)
    + Attributes (BrainPictures)

### Create a brain picture [POST]
    Creates a new brain picture.

+ Attributes (object)
    + year_id: 127 (number)
    + team_life_journal_id: 123 (number)
    + brain_picture_url: `https://bucketeer-69dafd78-a553-4915-aa56-d22c508c73ff.s3.amazonaws.com/public/mock-brain-2.png` (string)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (BrainPicture)


# Group Gamefiles

## Gamefile [/gamefile/{id}]
A gamefile is any kind of static asset used for a game.

+ Parameters
    + id (number) - The ID of the desired gamefile.

+ Attributes
    + id: 1 (number, required) - PostgreSQL `serial` type.
    + type: png (string) - Gamefile types include pdf, jpg, png, and gif.
    + url: `https://bucketeer-69dafd78-a553-4915-aa56-d22c508c73ff.s3.amazonaws.com/public/mock-brain-2.png` (string) - Public S3 link to this gamefile.
    + language_id: 1 (number) - Used for the /language/{id} service.

### Retrieve a gamefile [GET]
Retrieves the gamefile with the given ID.

+ Response 200 (application/json)
    + Attributes (Gamefile)

### Update a gamefile [PATCH]
Updates attributes of a specific gamefile.

+ Attributes (object)
    + id: 1 (number, required)
    + type: png (string, optional)
    + url: `https://bucketeer-69dafd78-a553-4915-aa56-d22c508c73ff.s3.amazonaws.com/public/mock-brain-0.png` (string, optional)
    + language_id: 2 (number, optional)

+ Request (application/json)

+ Response 204

### Delete a gamefile [DELETE]
Deletes a specific gamefile.

+ Response 204

## Gamefiles [/gamefiles{?limit}]

+ Attributes (array[Gamefile])

### List all gamefiles [GET]
Returns a list of all available gamefiles.

+ Parameters
    + limit (number, optional)

        A limit on the number of objects to be returned. ?What do we want as max, and do we need paging?

        + Default: `10`

+ Response 200 (application/json)
    + Attributes (Gamefiles)

### Create a gamefile [POST]
    Creates a new gamefile.

+ Attributes (object)
    + type: png (string)
    + url: `https://bucketeer-69dafd78-a553-4915-aa56-d22c508c73ff.s3.amazonaws.com/public/mock-brain-2.png` (string)
    + language_id: 1 (string)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (Gamefile)

# Group Life Journal

## LifeJournal [/journal/{id}]
+ Parameters
    + id (number) - The id of an existing Journal.

+ Attributes
    + id: 1 (number, required) - PostgreSQL `serial` type.
    + session_id: 1 (number, required) - FK of the Session Id that life journal is registered to.
    + name: Bob’s Burgers (string) - Name of Life Journal Team
    + virtual_die: false (boolean) - Flag of whether team is using virtual or physical die.
    + bias_positive: 0.33 (number) - Indicator of percentage cards are positive for this team.
    + bias_toxic: 0.33 (number) - Indicator of percentage cards are negative for this team.
    + bias_tolerable: 0.33 (number) - Indicator of percentage cards are tolerable for this team.
    + brain_base: 1 (number, required) - Id of the brain base this team rolled.
    + init_num_supports: 5 (number, required) - Number of straws this team had to use as supports
    + remaining_supports: 2 (number) - Rollup number of unused straws this team has available to them, tracked automatically when a journal entry is made.
    + total_positive : 3 (number) - Rollup number of total positive cards drawn.
    + total_toxic :  4 (number) - Rollup number of total toxic cards were drawn.
    + total_tolerable: 2 (number) - Rollup number of total tolerable cards were drawn.
    + total_weights: 1 (number) - Rollup number of total weights applied to structure.
    + selfie_img: `http://misatkes.com/nightbrain.gif` (string) - Public S3 link to the team selfie.
    + current_year: 4 (number) - Current highest year team has made it to.
    + start_time: 1571898527 (number) - Epoch timestamp when the journal was created. This is when the team began to play the game.
    + stop_time: 1571898527 (number) - Epoch timestamp when the team finished the game.
    + team_status: Completed (string) - Status of the team. Can be `Not started`, `In Progress`, `Completed`, or `Collapsed`.

### Retrieve a Journal [GET]
Retrieves a journal with the given ID.

+ Response 200 (application/json)
    + Attributes (LifeJournal)

### Update a Journal [PATCH]
Updates a journal

+ Attributes (LifeJournal)

+ Request (application/json)

+ Response 204

### Delete a journal [DELETE]
Deletes a specific journal.

+ Response 204

## Life Journals [/journals/]
+ Parameters
    + session_id (number, optional) - The id of a session to retrieve all journals for that session.

+ Attributes (array[LifeJournal])

### List all journals [GET]
+ Response 200 (application/json)
    + Attributes (Life Journals)

### Create a journal [POST]
Creates a new journal.

+ Attributes (object)
    + session_id: 1 (number)
    + name: "Bob's Burgers" (string)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (LifeJournal)

# Group JournalEntries

## JournalEntry [/journalentry/{id}]
A journal entry is created at the end of a year during a session.

+ Parameters
    + id (number, required) - The ID of the specific team note.

+ Attributes
    + id: 1 (number, required) - PostgreSQL `serial` type.
    + team_life_journal_id: 1 (number) - FK to the team journal that contains this journal entry.
    + `card_id`: 1 (number) - FK to the card related to this journal entry. ! I think this is an error in the db design and should be card_set instead.
    + `year_id`: 1 (number) - FK to the year associated with this team note. This year is only relevant to a specific team within a game session.
    + order: 999 (number) - ! I have no idea what this is.
    + `num_pipes`: 4 (number) - The number of pipecleaners given in the year of gameplay releated to this journal entry.
    + `num_straws`: 3 (number) - The number of straws given in the year of gameplay releated to this journal entry.
    + `num_weights`: 1 (number) - The number of weights given in the year of gameplay releated to this journal entry.
    + `num_supports_used`: 1 (number) - The number of straws used in the year of gameplay releated to this journal entry.
    + created: 1571898527 (number) - Epoch timestamp when the journal entry was created.

### Retrieve a journal entry[GET]
Retrieves the journal entry with the given ID.

+ Response 200 (application/json)
    + Attributes (JournalEntry)

### Update a journal entry [PATCH]
Update attributes of a specific journal entry.

+ Attributes (JournalEntry)

+ Request (application/json)

+ Response 204

### Delete a journal entry [DELETE]
Deletes a specific journal entry.

+ Response 204

## JournalEntries [/journalentries{?team_life_journal_id}]

+ Attributes (array[JournalEntry])

### List all journal entries [GET]
Returns a list of all journal entries. You can optionally request within a single team's life journal.

+ Parameters
    + team_life_journal_id (number, optional)

+ Response 200 (application/json)
    + Attributes (JournalEntries)

### Create a journal entry [POST]
Creates a new journal entry.

+ Attributes (object)
    + team_life_journal_id: 1 (number)
    + card_id: 1 (number) - ! I think this is a mistake and should be card_set
    + year_id: 1 (number)
    + order: 999 (number) - ! I have no idea what this is.
    + num_pipes: 4 (number)
    + num_straws: 3 (number)
    + num_weights: 1 (number)
    + num_supports_used: 1 (number)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (JournalEntry)

# Group Languages

## Language [/language/{id}]
A language is a user-selectable language for disucssion questions, cards, rules and game files.

+ Parameters
    + id (number) - The ID of the desired language.

+ Attributes (object)
    + id: 1 (number, required) - PostgreSQL `serial` type.
    + language_family: English (string) - ISO 639-1 language family.
    + language_code: `en-US` (string) - ISO 639-1 language code.
    + language_variant: American English (string) - ISO 639-1 language variant.
    + active_flag: true (boolean) - Flag to signify if the language is available within the UI.

### Retrieve a language [GET]
Retrieves the language with the given ID.

+ Response 200 (application/json)
    + Attributes (Language)

### Update or activate a language [PATCH]
Update attributes of a specific lanauge or change its active flag.

+ Attributes (object)
    + id: 1 (number, required)
    + language_family: English (string, optional)
    + language_code: `en-GB` (string, optional)
    + language_variant: British English (string, optional)
    + active_flag: false (boolean, optional)

+ Request (application/json)

+ Response 204 (application/json)

## Languages [/languages{?limit}]

+ Attributes (array[Language])

### List all languages [GET]
Returns a list of all available languages.

+ Parameters
    + limit (number, optional)

        A limit on the number of objects to be returned. Limit can range
        between 1 and 100 items.

        + Default: `10`

+ Response 200 (application/json)
    + Attributes (Languages)

### Create a language [POST]
Creates a new language.

+ Attributes (object)
    + language_family: Spanish (string)
    + language_code: `es-ES` (string)
    + language_variant: Castilian Spanish (string)
    + active_flag: true (boolean, optional)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (Language)

## UserLanguage [/userlanguage/{id}]
A user language is an available language for disucssion questions, cards, rules and game files.

+ Parameters
    + id (number) - The ID of the user_language record.

+ Attributes (object)
    + `id`: 1 (number, required) - PostgreSQL `serial` type.
    + `user_id`: 1 (number, required) - The FK to the user. A user has certain languages enabled as add-on purchases. Each of these purchases is represented by a user_language record.
    + `language_id`: 1 (number, required) - FK to the language table, so that we can get language names to display in the UI.
    + `language_family`: English - The human-readable name for the language to show in our portals.

### Delete a user language [DELETE]
Deletes a specific user language.

+ Response 204

## UserLanguages [/userlanguages/{user_id}]

### List all user languages for a specific user [GET]
Returns a list of all languages that are available to a specific user within the admin or moderator portals.

+ Parameters
    + user_id (number)

+ Response 200 (application/json)
    + Attributes (array[UserLanguage])

### Create a user language [POST]
Creates a new user_language record.

+ Attributes (object)
    + user_id: 1 (number, required)
    + language_id: 1 (number, required)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (UserLanguage)

# Group Sessions

## Session [/session/{id}]
A session is multi-team gaming experience.

+ Parameters
    + id: 1 (number) - The ID of the desired session.

+ Attributes (object)
    + id: 1 (number)
    + moderator_id: 1 (number) - FK to ID of the user that will be moderatoring this session.
    + moderator_name: `Greg Barlin` - The name of the session moderator.
    + language_family: `English` - The language of the card set used for this session.
    + session_code_id: 8675309 (number) - FK to session_code for this session.
    + name: Happy People (string) - A friendly name for this session.
    + location: `University of Southern California` (string) - The real-world location for this session.
    + brain_base_set: 1 (number) - FK to the ID of the brain base set used for this session.
    + card_set: 1 (number) - FK to the ID of the card set used for this session.
    + cards_to_draw: 3 (number) - The number of cards a team needs to draw during each game of gameplay.
    + rule_set: 1 (number) - FK to the ID of the rule set used for this session.
    + start_time: null (number) - Epoch timestamp when the session changed to started status.
    + completed_time: null (number) - Epoch timestamp when the session changed to completed status.
    + session_status: upcoming (string) - A session can be upcoming, started, paused, or completed.
    + num_of_teams: 15 (number) - The number of teams participating in this session.
    + offline: false (boolean) - A flag for sessions that were held offline.

### Retrieve a session [GET]
Get all information related to a specific session.

+ Response 200 (application/json)
    + Attributes (Session)

### Update a session [PATCH]
Update attributes of a specific session or change the status for the session.

+ Attributes (Session)

+ Request (application/json)

+ Response 204

### Delete a session [DELETE]
Deletes a specific session.

+ Response 204

## Sessions [/sessions{?moderator_id}]

+ Attributes (array[Session])

### List all sessions [GET]
Returns a list of all sessions. You optionally can request all sessions for a specific moderator.

+ Parameters
    + moderator_id (number, optional)

+ Response 200 (application/json)
    + Attributes (Sessions)

### Create a session [POST]
Creates a new session.

+ Attributes
    + moderator_id: 1 (number) - FK to ID of the user that will be moderatoring this session.
    + session_code_id: 8675309 (number) - FK to session_code used for this session.
    + name: Happy People (string) - A friendly name for this session.
    + location: `University of Southern California` (string) - The real-world location for this session.
    + brain_base_set: 1 (number) - FK to the ID of the brain base set used for this session.
    + card_set: 1 (number) - FK to the ID of the card set used for this session.
    + rule_set: 1 (number) - FK to the ID of the rule set used for this session.
    + start_time: null (number) - Epoch timestamp when the session changed to started status.
    + completed_time: null (number) - Epoch timestamp when the session changed to completed status.
    + session_status: upcoming (string) - A session can be upcoming, started, paused, or completed.
    + num_of_teams: null (number) - The number of teams participating in this session.
    + offline: false (boolean) - A flag for sessions that were held offline.

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (Session)

## SessionCode [/sessioncode{?online}]
A session code is a random 8-digit integer that is claimed by a session.

+ Parameters
    + online (boolean, optional)

+ Attributes (object)
    + code: 11111111 (number) - The code that will be used for a single session.
    + online: true (boolean) - Specifies if the session code can be used offline or only online.
    + timestamp: 1571898527 (number) - Epoch timestamp of when this session code was claimed.

### Claim a session code [PUT]
Claims a session code to be used by a session.

+ Response 200 (application/json)
    + Attributes (SessionCode)

## SessionRejoin [/session/rejoin/]
Allows a team to rejoin a session if the app has crashed.

+ Parameters
    + team_life_journal_team_name (string, required) - The specifc team name that is trying to rejoin.
    + session_code (number, required) - The session code used to start the current session.

### Validate the team can rejoin a session [GET]

+ Response 200 (application/json)
    + Attributes (LifeJournal)

## SessionProgress [/session/progress/{team_life_journal_id}]

+ Parameters
    + team_life_journal_id (number, required) - The ID for the team life journal.

+ Attributes (object)
    + current_year (number): 2 - The team's current year from the life journal.
    + years (array)
        + (object)
            + year_number (number)
            + journal_entries: (array[JournalEntries])

### Retrieve team progress [GET]

+ Response 200 (application/json)
    + Attributes (SessionProgress)

# Group TeamNotes

## TeamNote [/teamnote/{id}]
A team note is created at the end of year during a session.

+ Parameters
    + id (number, required) - The ID of the specific team note.

+ Attributes
    + id: 1 (number, required) - PostgreSQL `serial` type.
    + team_life_journal_id: 1 (number) - FK to the team journal that contains this team note.
    + year_id: 127 (number) - FK to the year associated with this team note. This year is only relevant to a specific team within a game session.
    + journal_entry_id: 42 (number) - FK to the journal entry that contains this team note.
    + text: Year 4 was a truly wonderful year for our brain (string) - The meaningful contents of the team note.

### Retrieve a team note [GET]
Retrieves the team note with the given ID.

+ Response 200 (application/json)
    + Attributes (TeamNote)

## TeamNotes [/teamnotes{?team_life_journal_id}]

+ Attributes (array[TeamNote])

### List all team notes[GET]
Returns a list of all team notes. You can optionally request within a single team's life journal.

+ Parameters
    + team_life_journal_id (number, optional)

+ Response 200 (application/json)
    + Attributes (TeamNotes)

### Create a team note [POST]
Creates a new team note.

+ Attributes (object)
    + year_id: 127 (number)
    + team_life_journal_id: 123 (number)
    + journal_entry_id: 42 (number)
    + text: Year 4 was a truly wonderful year for our brain (string)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (TeamNote)

# Group TeamYear

## TeamYear [/teamyear/{journal_id}/{number}]
A team year records the activity within a single year of gameplay for one team.

+ Parameters
    + journal_id (number, required)
    + number (number, required)

+ Attributes
    + id: 1 (number, required) - PostgreSQL `serial` type.
    + journal_id: 1 (number) - FK to the team journal that contains this team year.
    + number: 2 (number) - The year of gameplay.
    + start_time: 1571898527 (number) - Epoch timestamp of when this year started.
    + end_time: 1571898527 (number) - Epoch timestamp of when this year ended.
    + total_positive: 1 (number) - Counter for number of positive cards selected during this year.
    + total_negative: 1 (number) - Counter for number of negative/toxic cards selected during this year.
    + total_tolerable: 1 (number) - Counter for number of tolerable cards selected during this year.
    + total_weights: 1 (number) - Counter for number of weights used during this year.
    + support_used: 2 (number) - Counter for number of social supports used during this year.
    + brain_picture_id: 1 (number) - The brain picture taken at the end of the year. FK to brain picture table.

### Retrieve a team year [GET]
Retrieves the team year for the given life journal for the specific year.

+ Response 200 (application/json)
    + Attributes (TeamYear)

### Create a TeamYear [POST]
+ Request (application/json)
  + Attributes (TeamYear)

+ Response 201 (application/json)
  + Attributes (TeamYear)

### Update a team year [PUT]
Updates information related to a specific team year for a given life journal.
+ Request (application/json)
  + Attributes (TeamYear)

+ Response 200 (application/json)
    + Attributes (TeamYear)

# Group Help Requests

## Help Request [/help/{id}]
Help Requests are used for teams to indicate that they have a pressing concern while playing.

+ Parameters
    + id (number) - The ID of the specific Help Request.

+ Attributes (object)
    + id: 1 (number, required) - PostgreSQL `serial` type.
    + session_team: 1 (number, required) - FK ID of the Journal this is related to.
    + status: WAITING (string) - Status of whether the help request has been modified or not.
    + created: 1571898527 (number) - Epoch timestamp of when the help request occurred.

### Retrieve a Help Request [GET]
Retrieves the Help Request with the given ID.

+ Response 200 (application/json)
    + Attributes (Help Request)

### Update a Help Request [PATCH]
Update attributes of a specific help request.

+ Attributes (object)
    + id: 1 (number, required)
    + status: COMPLETE (string, optional)

+ Request (application/json)

+ Response 204 (application/json)

## Help Requests [/help{?sessionCode,journalId,limit}]

+ Attributes (array[Help Request])

### List all Help Requests [GET]
Returns a list of all help requests.

+ Parameters
    + limit (number, optional)

        A limit on the number of objects to be returned. Limit can range
        between 1 and 100 items.

        + Default: `10`

    + sessionCode (number, optional)

         A code for a specific session, to retrieve all help requests for that session.

    + journalId (number, optional)

        An ID of a Life Journal that belongs to a specific team, so that all Help Requests made by that team can be returned.

+ Response 200 (application/json)
    + Attributes (Help Requests)

### Create a Help Request [POST]
Creates a new Help Request.

+ Attributes (object)
    + journalId: 1 (string)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (Help Request)

# Group Discussion Questions

## Discussion Question [/discussion/{id}]
Discussion Questions are used by a moderator to facilitate discussion during a session. The discussion_question table includes the possible questions a moderator may put into a set of discussion questions (aka session_discussion_questions) to be used by a single mod_session.

+ Parameters
    + id (number) - The ID of the specific Discussion Question.

+ Attributes (object)
    + id: 1 (number, required) - PostgreSQL `serial` type.
    + language_id: 1 (number, required) - FK ID of the Language this is in.
    + question_text: How important are social supports during the early years? (string) - Question to be asked by moderator.
    + active: true (boolean) - Flag indicating whether the question can be seen by a moderator.
    + visible: true (boolean) - Flag indicating whether the question is visible to an admin.

### Retrieve a Discussion Question [GET]
Retrieves the Discussion Question with the given ID.

+ Response 200 (application/json)
    + Attributes (Discussion Question)

### Update a Discussion Question [PUT]
Update attributes of a specific Discussion Question.

+ Request (application/json)
  + Attributes (Discussion Question)

+ Response 200 (application/json)
    + Attributes (Discussion Question)

### Delete a Discussion Question [PATCH]
+ Request (application/json)
    + Attributes (object)
      + visible: false (boolean)

+ Response 204

## Discussion Questions [/discussions]

+ Attributes (array[Discussion Question])

### List all Discussion Questions [GET]
Returns a list of all Discussion Questions.

+ Response 200 (application/json)
    + Attributes (array[Discussion Question])

### Create a Discussion Question [POST]
Creates a new Discussion Question. This is only used by an administrator.

+ Attributes (object)
    + language_id: 1 (number, optional) - Defaults to 1.
    + question_text: This is a discussion question. (string, required)
    + active: true (boolean, optional) - Default to true.
    + visible: true (boolean, optional) - Default to true.

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (object)
        + id : 2
        + language_id: 1
        + question_text: This is a discussion question.
        + active: true

## Session Questions [/sessionquestions/{sessionId}]

Session questions is a collection of session question records. The moderator selects discussion questions to be used during a session. These are the session questions. The composite of discussion_question_id+mod_session_id is unique.

+ Attributes
    + id: 1 (number) - The id of the session question.
    + mod_session_id: 1 (number) - FK to the session that will be using this session question.
    + discussion_question_id: 1 (number) - FK to the discussion question.
    + language_id: 1 (number) - Comes from the discussion question table.
    + question_text: This is a discussion question. (string) - Comes from the discussion question table.

### List all Session Questions [GET]
Returns a list of session questions associated with the current session.

+ Parameters
    + sessionId (number, required) - The ID for the current session. Used to retrieve all associated Session Questions for that session from the session_discussion_questions table. The response should include an ordered array of the associated discussion questions.

+ Response 200 (application/json)
    + Attributes (object)
        + mod_session_id: 1 (number)
        + session_questions: array[Session Questions] (array[Session Questions])

### Add Discussion Questions to the set of Session Questions [POST]
Provide a list of discussion questions ids to be used by a session. Order is inferred by the list.

+ Request (application/json)
    + Attributes (object)
        + discussion_question_ids : 1, 2, 3 (array[number])

+ Response 201 (application/json)
    + Attributes (object)
        + mod_session_id: 1
        + session_questions: array[Discussion Questions] (array[Discussion Questions])

### Reorder Session Questions [PUT]
Provide a list of session questions ids to be used by a session. Order is inferred by the list.

+ Request (application/json)
    + Attributes (object)
        + ids : 1, 2, 3 (array[number])

+ Response 200 (application/json)
    + Attributes (object)
        + mod_session_id: 1
        + session_questions: array[Session Questions] (array[Session Questions])

# Group FileUploads

## FileUploads [/fileuploads/]
The FileUploads service uploads a multipart file to S3. We do not need a URL in the response because we can perfectly determine the public URL based on the file name and the S3 bucket name.

+ Attributes
    + file: Session123Team4Year2.jpg (string, required) - The name of the file to be uploaded.

### Upload a file [POST]
Uploads a single file.

+ Attributes (FileUploads)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (FileUploads)